#include <iostream>
#include <stack>
#include <vector>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

void allTraversals(TreeNode* root, vector<int>& preorder, vector<int>& inorder, vector<int>& postorder) {
    if (!root) return;

    stack<pair<TreeNode*, int>> st;
    st.push({root, 1});

    while (!st.empty()) {

        while(st.size())
        {
            auto &[node,state] = st.top();
            
            if(state == 1) //preorder
            {
                preorder.push_back(node->val);
                state++;
                if(node->left) st.push({node->left,1});
            }
            else if(state == 2)
            {
                inorder.push_back(node->val);
                state++;
                if(node->left) st.push({node->right,1});
            }
            else
            {
                postorder.push_back(node->val);
                st.pop();
            }
        }
    }
}

int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    vector<int> preorder, inorder, postorder;
    allTraversals(root, preorder, inorder, postorder);

    cout << "Preorder: ";
    for (int val : preorder) cout << val << " ";
    cout << "\nInorder: ";
    for (int val : inorder) cout << val << " ";
    cout << "\nPostorder: ";
    for (int val : postorder) cout << val << " ";

    return 0;
}
